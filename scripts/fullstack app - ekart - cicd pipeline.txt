pipeline {
    agent any
    
    tools {
        maven 'maven3.6.3'
        jdk 'jdk17'
    }
    
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }
    stages {
        stage('Git Checkout...!') {
            steps {
                git branch: 'main', url: 'https://github.com/atulj007/Ekart.git'
            }
        }
         
        stage('Compile..!') {
            steps {
                sh "mvn compile"
            }
        }
        
        stage('Unit Test..!!') {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }
        
        stage('SonarQube Analysis..!!') {
            steps {
               withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=EKART -Dsonar.projectName=EKART \
                    -Dsonar.java.binaries=. '''
                    }               
            }
        }
        
        stage('OWASP Dependency Checks..!!') {
            steps {
                dependencyCheck additionalArguments: ' --scan ./', odcInstallation: 'dc'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('Build..!') {
            steps {
               sh "mvn package -DskipTests=true"
            }
        }
        stage('Deploy Artifacts to Nexus..!') {
            steps {
               withMaven(globalMavenSettingsConfig: 'global-Maven', jdk: 'jdk17', maven: 'maven3.6.3', mavenSettingsConfig: '', traceability: true) {
                 sh "mvn deploy -DskipTests=true"
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                 
                withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                 sh "docker build -t atulj79/ekart:latest -f docker/Dockerfile ."
                    }   
                }
              
            }
        }
        
        stage('Trivy Scann..!!') {
            steps {
                sh "trivy image atulj79/ekart:latest > trivy-report.txt"
            }
        }
        
        stage('Docker Image Push ') {
            steps {
                script {
                 
                withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                 sh "docker push atulj79/ekart:latest"
                    }   
                }
              
            }
        }
        stage(' Kubernetes Deploy...!!') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8s-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://172.31.85.155:6443') {
                    sh "kubectl apply -f deploymentservice.yml -n webapps"
                    sh "kubectl get svc -n webapps"
                    }
            }  
        }
    }

        
}

